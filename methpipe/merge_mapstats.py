#!/usr/bin/env python
"""Program to merge multiple .mapstats file generated by walt.
"""
import sys, re
template = """[TOTAL NUMBER OF READS: %(total_reads)d]
[UNIQUELY MAPPED READS: %(uniq_mapped)d (%(uniq_frac).2f%%)]
[AMBIGUOUS MAPPED READS: %(ambi_reads)d (%(ambi_frac).2f%%)]
[UNMAPPED READS: %(unmapped_reads)d (%(unmapped_frac).2f%%)]


[READS SHORTER THAN 38 ARE IGNORED]
[%(short_reads)d (%(short_frac).2f%%) READS ARE SHORTER THAN 38]"""

def main():
  global template
  if len(sys.argv) <= 1:
    sys.stdout.write("Usage: %s mapstats1 mapstats2 ...\n"%sys.argv[0])
    sys.stdout.write("Merged results will be written to stdout.\n")
    sys.exit(1)

  total_reads = 0
  uniq_mapped = 0
  ambi_reads = 0
  unmapped_reads = 0
  short_reads = 0
  p_list = ["NUMBER OF READS: (\d+)", "UNIQUELY MAPPED READS: (\d+)",
    "AMBIGUOUS MAPPED READS: (\d+)", "UNMAPPED READS: (\d+)",
    "^\[(\d+) \([0-9,.]+%\) READS ARE SHORTER THAN 38"]
  for inf in sys.argv[1:]:
    try:
      infh = open(inf, 'r')
    except:
      sys.stderr.write("Unable to open file: %s\n"%inf)
      sys.exit(0)
    for l in infh:
      for idx, p in enumerate(p_list):
        r = re.search(p, l)
        if r:
          if idx == 0:
            total_reads += int(r.group(1))
          elif idx == 1:
            uniq_mapped += int(r.group(1))
          elif idx == 2:
            ambi_reads += int(r.group(1))
          elif idx == 3:
            unmapped_reads += int(r.group(1))
          elif idx == 4:
            short_reads += int(r.group(1))

  d = {"total_reads":total_reads, "uniq_mapped":uniq_mapped,
    "ambi_reads":ambi_reads,
    "unmapped_reads":unmapped_reads, "short_reads":short_reads,
    "uniq_frac":100.0*uniq_mapped/total_reads,
    "ambi_frac":100.0*ambi_reads/total_reads,
    "unmapped_frac":100.0*unmapped_reads/total_reads,
    "short_frac":100.0*short_reads/total_reads}

  sys.stdout.write(template%d)

if __name__ == "__main__":
  main()
