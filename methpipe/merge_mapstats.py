#!/usr/bin/env python
"""Program to merge multiple .mapstats file generated by walt.
"""
import sys, re
class mapstats:
  def __init__(self, infh_list):
    self.infh_list = infh_list
    self._pattern_list()

  def _pattern_list(self):
    self.patterns = {}
    self.template = ""

  def _compute(self):
    self.d = self.d

  def report(self, outfh):
    outfh.write(self.template%self.d)

  def parse(self):
    for infh in self.infh_list:
      for l in infh:
        for key in self.patterns.keys():
          p = self.patterns[key]
          r = re.search(p, l)
          if r:
            self.d[key] += int(r.group(1))

    self._compute()

  def __str__(self):
    for i in self.d.keys():
      sys.stdout.write("\t".join(i, str(self.d[i]))+"\n")

class stats_se(mapstats):
  def _pattern_list(self):
    self.patterns = {"total_reads":"TOTAL NUMBER OF READS: (\d+)",
        "uniq_reads":"UNIQUELY MAPPED READS: (\d+)",
        "ambi_reads":"AMBIGUOUS MAPPED READS: (\d+)",
        "unmapped_reads":"UNMAPPED READS: (\d+)",
        "short_reads":"^\[(\d+) \([0-9,.]+%\) READS ARE SHORTER THAN 38"}
    self.d = dict.fromkeys(self.patterns.keys(), 0)
    self.template = """[TOTAL NUMBER OF READS: %(total_reads)d]
[UNIQUELY MAPPED READS: %(uniq_mapped)d (%(uniq_frac).2f%%)]
[AMBIGUOUS MAPPED READS: %(ambi_reads)d (%(ambi_frac).2f%%)]
[UNMAPPED READS: %(unmapped_reads)d (%(unmapped_frac).2f%%)]


[READS SHORTER THAN 38 ARE IGNORED]
[%(short_reads)d (%(short_frac).2f%%) READS ARE SHORTER THAN 38]
"""

  def _compute(self):
    self.d["uniq_frac"] = 100.0*self.d["uniq_mapped"]/self.d["total_reads"]
    self.d["ambi_frac"] = 100.0*self.d["ambi_mapped"]/self.d["total_reads"]
    self.d["unmapped_frac"] = 100.0*self.d["unmapped_mapped"] \
      /self.d["total_reads"]
    self.d["short_frac"] = 100.0*self.d["short_mapped"]/self.d["total_reads"]

class stats_pe(mapstats):
  def _pattern_list(self):
    self.patterns = {"total_pairs":"TOTAL NUMBER OF READ PAIRS: (\d+)",
        "uniq_pairs":"UNIQUELY MAPPED READ PAIRS: (\d+)",
        "ambi_pairs":"AMBIGUOUS MAPPED READ PAIRS: (\d+)",
        "unmapped_pairs":"UNMAPPED READ PAIRS: (\d+)",
        "uniq_mate1":"UNIQUELY MAPPED READS IN MATE_1: (\d+)",
        "ambi_mate1":"AMBIGUOUS MAPPED READS IN MATE_1: (\d+)",
        "unmapped_mate1":"UNMAPPED READS IN MATE_1: (\d+)",
        "uniq_mate2":"UNIQUELY MAPPED READS IN MATE_2: (\d+)",
        "ambi_mate2":"AMBIGUOUS MAPPED READS IN MATE_2: (\d+)",
        "unmapped_mate2":"UNMAPPED READS IN MATE_2: (\d+)",
        "short_mate1":"^\[(\d+) \([0-9,.]+%\) READS ARE SHORTER THAN 38 IN MATE_1",
        "short_mate2":"^\[(\d+) \([0-9,.]+%\) READS ARE SHORTER THAN 38 IN MATE_2"}
    self.d = dict.fromkeys(self.patterns.keys(), 0)
    self.template = """[TOTAL NUMBER OF READ PAIRS: %(total_pairs)d]
[UNIQUELY MAPPED READ PAIRS: %(uniq_pairs)d (%(uniq_frac).2f%%)]
[AMBIGUOUS MAPPED READ PAIRS: %(ambi_pairs)d (%(ambi_frac).2f%%)]
[UNMAPPED READ PAIRS: %(unmapped_pairs)d (%(unmapped_frac).2f%%)]
   [UNIQUELY MAPPED READS IN MATE_1: %(uniq_mate1)d (%(uniq_frac_mate1).2f%%)]
   [AMBIGUOUS MAPPED READS IN MATE_1: %(ambi_mate1)d (%(ambi_frac_mate1).2f%%)]
   [UNMAPPED READS IN MATE_1: %(unmapped_mate1)d (%(unmapped_frac_mate1).2f%%)]
   [UNIQUELY MAPPED READS IN MATE_2: %(uniq_mate2)d (%(uniq_frac_mate2).2f%%)]
   [AMBIGUOUS MAPPED READS IN MATE_2: %(ambi_mate2)d (%(ambi_frac_mate2).2f%%)]
   [UNMAPPED READS IN MATE_2: %(unmapped_mate2)d (%(unmapped_frac_mate2).2f%%)]


[READS SHORTER THAN 38 ARE IGNORED]
[%(short_mate1)d (%(short_frac_mate1).2f%%) READS ARE SHORTER THAN 38 IN MATE_1]
[%(short_mate2)d (%(short_frac_mate2).2f%%) READS ARE SHORTER THAN 38 IN MATE_2]
"""

  def _compute(self):
    self.d["uniq_frac"] = 100.0*self.d["uniq_pairs"]/self.d["total_pairs"]
    self.d["ambi_frac"] = 100.0*self.d["ambi_pairs"]/self.d["total_pairs"]
    self.d["unmapped_frac"] = 100.0*self.d["unmapped_pairs"] \
      /self.d["total_pairs"]
    self.d["uniq_frac_mate1"] = 100.0*self.d["uniq_mate1"]\
      /self.d["total_pairs"]
    self.d["ambi_frac_mate1"] = 100.0*self.d["ambi_mate1"]\
      /self.d["total_pairs"]
    self.d["unmapped_frac_mate1"] = 100.0*self.d["unmapped_mate1"]\
      /self.d["total_pairs"]
    self.d["uniq_frac_mate2"] = 100.0*self.d["uniq_mate2"]\
      /self.d["total_pairs"]
    self.d["ambi_frac_mate2"] = 100.0*self.d["ambi_mate2"]\
      /self.d["total_pairs"]
    self.d["unmapped_frac_mate2"] = 100.0*self.d["unmapped_mate2"]\
      /self.d["total_pairs"]
    self.d["short_frac_mate1"] = 100.0*self.d["short_mate1"]\
      /self.d["total_pairs"]
    self.d["short_frac_mate2"] = 100.0*self.d["short_mate2"]\
      /self.d["total_pairs"]

def get_type(infh):
  l = infh.readline()
  if re.search("PAIR", l):
    code = 2
  else:
    code = 1
  infh.seek(0)
  return code

def main():
  global template
  if len(sys.argv) <= 1:
    sys.stdout.write("Usage: %s mapstats1 mapstats2 ...\n"%sys.argv[0])
    sys.stdout.write("Merged results will be written to stdout.\n")
    sys.exit(0)

  infh_list = []
  for inf in sys.argv[1:]:
    try:
      infh_list.append(open(inf, 'r'))
    except:
      sys.stderr.write("Unable to open file: %s\n"%inf)
      sys.exit(1)

  map_type = get_type(infh_list[0])
  if map_type == 1:
    stats = stats_se(infh_list)
  else:
    stats = stats_pe(infh_list)

  stats.parse()
  stats.report(sys.stdout)

if __name__ == "__main__":
  main()
